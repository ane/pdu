module Main where

import System
import System.IO
import System.Directory
import System.FilePath
import Control.Exception
import Control.Monad
import qualified Control.Monad.Parallel as MP
import Data.Maybe
import Data.List.Utils

getSaneDirectoryContents :: FilePath -> IO [FilePath]
getSaneDirectoryContents path = do
  everything <- getDirectoryContents path
  mapM (return . concatPaths path) (filter (`notElem` [".", ".."]) everything)

getTopLevelDirectories :: FilePath -> IO [FilePath]
getTopLevelDirectories path = do
  dotless <- getSaneDirectoryContents path
  filterM doesDirectoryExist dotless

getDirectorySize :: FilePath -> IO Integer
getDirectorySize path = do
  dotless <- getSaneDirectoryContents path
  subd <- filterM doesDirectoryExist dotless
  files <- filterM doesFileExist dotless
  sizes <- mapM getFileSize files
  subDirSizes <- mapM getDirectorySize subd
  return $ sum $ map (fromMaybe 0) sizes + (sum subDirSizes)

getFileSize :: FilePath -> IO (Maybe Integer)
getFileSize path = handle t $ bracket (openFile path ReadMode) hClose
  (\h -> do size <- hFileSize h
            return $ Just size)
  where
    t :: SomeException -> IO (Maybe Integer)
    t _ = return Nothing

-- |Joins two paths together.
concatPaths :: String -> String -> FilePath
concatPaths p1 p2 = joinPath [p1, p2]

getPathSize :: FilePath -> IO [(FilePath, Integer)]
getPathSize path = do
  dirs <- getTopLevelDirectories path
  sizes <- MP.mapM getDirectorySize dirs
  return $Â zip dirs sizes

prettyPrint :: [(FilePath, Integer)] -> IO ()
prettyPrint pathData = do
  mapM_ dirInfo pathData
  where
    dirInfo (a, b) = do
      putStrLn $ a ++ ": " ++ show b ++ "B"

main = do args <- getArgs
          case args of
            [] -> putStrLn "Usage: pdu <path1> <path2> ... <pathN>"
            paths -> mapM_ (getPathSize >=> prettyPrint) paths
